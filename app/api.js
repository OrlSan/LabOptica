// Generated by CoffeeScript 1.8.0

/*
 *  apiRouter
 *
 * Router de Express.js que recibe y procesa todas las peticiones
 * hechas desde Backbone hacia la aplicación en la ruta montada,
 * actualmente '/datos.json'
 *
 * El Router crea, actualiza, borra y manda toda la información a
 * la aplicación Backbone en el frontend para interactuar con el
 * usuario.
 */
var Datos, express, router;

express = require('express');

router = express.Router();

Datos = require('./models/Datos');

router.get('/', function(req, res) {
  return Datos.find({
    Vigente: true
  }).sort({
    Number: -1
  }).exec(function(err, documents) {
    if (err) {
      return res.json({
        success: false,
        message: 'Hubo un error con la base de datos. Pide ayuda.'
      });
    } else {
      return res.json(documents);
    }
  });
});

router.post('/', function(req, res) {
  if (parseInt(req.body.Number) > 0 && (req.body.Number !== null)) {
    return Datos.findOne({
      Number: req.body.Number,
      Vigente: true
    }, function(err, doc) {
      var muestra;
      if (err) {
        console.log("Hubo un error con la base de datos: " + err);
        res.json({
          success: false,
          message: "Hubo un error con la base de datos: " + err
        });
      }
      if (doc) {
        console.log("Ya se encuentra un registro de esta muestra");
        return res.json({
          success: false,
          message: "Ya se encuentra un registro de esta muestra"
        });
      } else {
        muestra = new Datos({
          Number: req.body.Number,
          Gender: req.body.Gender,
          Color: req.body.Color,
          Tinte: req.body.Tinte
        });
        return muestra.save(function(saveErr) {
          if (saveErr) {
            console.log("Hubo un error al guardar la información: " + saveErr);
            return res.json({
              success: false,
              message: "No se puede guardar la información. Pide ayuda."
            });
          } else {
            return res.json({
              success: true,
              message: "La información se guardó correctamente"
            });
          }
        });
      }
    });
  } else {
    return res.json({
      success: false,
      message: "Debes introducir un número válido para la muestra."
    });
  }
});

router.use(function(req, res, next) {
  if (req.isAuthenticated()) {
    return next();
  } else {
    return res.json({
      success: false,
      message: 'Debes iniciar sesión para continuar'
    });
  }
});

module.exports = router;
