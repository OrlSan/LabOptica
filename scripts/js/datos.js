// Generated by CoffeeScript 1.8.0

/*
 * Datos.coffee | js
 *
 * Modelo, vista y controlador para interactuar con los datos de
 * la aplicación LabOptica para crear, modificar y relacionar los
 * datos a través de peticiones a la API.
 *
 * (c) 2014, Orlando Rey Sánchez.
 */

(function() {
  var App, GetUrlParameter;

  App = App || {
    Views: {},
    Models: {},
    Collections: {}
  };

  GetUrlParameter = function(sParam) {
    var item, sPageURL, sParameterName, sURLVariables, _i, _len;
    sPageURL = window.location.search.substring(1);
    sURLVariables = sPageURL.split('&');
    for (_i = 0, _len = sURLVariables.length; _i < _len; _i++) {
      item = sURLVariables[_i];
      sParameterName = item.split('=');
      if (sParameterName[0] === sParam) {
        return sParameterName[1];
      }
    }
  };

  App.Models.Muestra = Backbone.Model.extend({
    idAttribute: '_id',
    initialize: function() {
      this.set('Mensaje', false);
    },
    urlRoot: '/datos.json'
  });

  App.Collections.ColMuestras = Backbone.Collection.extend({
    model: App.Models.Muestra,
    className: 'list-group',
    tagname: 'li',
    lastDate: null,
    url: GetUrlParameter('date') ? '/datos.json?date=' + GetUrlParameter("date") : '/datos.json',
    initialize: function() {
      this.fetch({
        async: false
      });
    }
  });

  App.Views.GlobalView = Backbone.View.extend({
    tagname: 'ul',
    className: 'list-group',
    render: function() {
      this.collection.each(function(data) {
        var singleView;
        singleView = new App.Views.SingleDataView({
          model: data
        });
        return this.$el.append(singleView.render().el);
      }, this);
      return this;
    },
    initialize: function(options) {
      $('.addbtn').bind('click', this.addData);
    },
    addData: function() {
      var muestra, properties;
      properties = {
        Number: $('#number').val(),
        Gender: $('#gender').val(),
        Color: $('#color').val(),
        Tinte: $('#tinte').val()
      };
      muestra = new App.Models.Muestra(properties);
      return muestra.save(properties, {
        success: function(model, response, options) {
          if (response.success) {
            $('#number').val('');
            $('#gender').val('hombre');
            $('#color').val('castano');
            $('#tinte').val('false');
            return App.col.add(response.model);
          } else {
            alert(response.message);
            return App.col.reset();
          }
        }
      });
    }
  });

  App.Views.SingleDataView = Backbone.View.extend({
    tagName: 'li',
    myTemplate: _.template($('#dataTemplate').html()),
    className: 'list-group-item',
    initialize: function() {
      this.model.on('change', this.render, this);
    },
    render: function() {
      this.$el.html(this.myTemplate(this.model.attributes));
      return this;
    },
    events: {
      'click .btn-danger': 'deleteData',
      'click .btn-primary': 'updateData',
      'change input#medida': 'setMedida',
      'change input#incert': 'setIncert'
    },
    setMedida: function(e) {
      var value;
      value = $(e.currentTarget).val();
      return this.model.set('Medida', value);
    },
    setIncert: function(e) {
      var value;
      value = $(e.currentTarget).val();
      return this.model.set('Incert', value);
    },
    deleteData: function() {
      console.log("Borrando el registro con el ID " + (this.model.get('_id')));
      this.model.destroy({
        success: function(model, response, options) {
          if (response.success) {
            model.set('Mensaje', response.message);
            model.set('Vigente', false);
            App.col.remove(model);
          } else {
            console.log("No se pudo eliminar: " + response.message);
            model.set('Mensaje', response.message);
          }
        },
        error: function(model, xhr, options) {
          console.log(xhr);
          model.set('Mensaje', 'Hubo un error de comunicación. Recarga la página.');
        }
      });
    },
    updateData: function() {
      console.log("Actualizando el registro " + (JSON.stringify(this.model.attributes)));
      this.model.save(this.model.attributes, {
        success: function(model, response, options) {
          console.log(response);
          return model.set('Mensaje', response.message);
        },
        error: function(model, xhr, options) {
          console.log(xhr);
          return model.set('Mensaje', 'Hubo un error de comunicación. Recarga la página.');
        }
      });
    }
  });

  App.col = new App.Collections.ColMuestras();

  App.globView = new App.Views.GlobalView({
    collection: App.col
  });

  $(".pantalla").html(App.globView.render().el);

  $('form').on('submit', function(event) {
    App.col = new App.Collections.ColMuestras();
    return event.preventDefault();
  });

}).call(this);
